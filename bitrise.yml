app:
  envs:
  - BITRISE_PROJECT_PATH: Client.xcodeproj
    opts:
      is_expand: false
  - BITRISE_EXPORT_METHOD: development
    opts:
      is_expand: false
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
format_version: '6'
meta:
  bitrise.io:
    machine_type: performance
project_type: ios
trigger_map:
- push_branch: main
  workflow: RunUnitTests
- push_branch: chronological-tabs
  workflow: RunUnitTests
- push_branch: v30.x
  workflow: xcode12-release-and-beta-nocache
- push_branch: v31.x
  workflow: xcode12-release-and-beta-nocache
- pull_request_target_branch: main
  workflow: RunUnitTestsNewL10N
- pull_request_source_branch: '*'
  pull_request_target_branch: chronological-tabs
  workflow: RunUnitTests
workflows:
  CommonBuild-UItest-XCUISmoketest:
    after_run:
    - RunUITests
    - RunSmokeXCUITests
    description: This Workflow is to run tests (currently SmokeTest) when there is
      a merge in master
    meta:
      bitrise.io:
        stack: osx-xcode-12.3.x
    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0: {}
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo "PostClone step"

            carthage checkout


            cd content-blocker-lib-ios/ContentBlockerGen && swift run'
        title: Post clone step for TP updates
    - cache-pull@2.1: {}
    - certificate-and-profile-installer@1.10: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo ''EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64=arm64
            arm64e armv7 armv7s armv6 armv8'' > /tmp/tmp.xcconfig

            echo ''EXCLUDED_ARCHS=$(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT))''
            >> /tmp/tmp.xcconfig

            echo ''IPHONEOS_DEPLOYMENT_TARGET=11.4'' >> /tmp/tmp.xcconfig

            echo ''SWIFT_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            echo ''GCC_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            export XCODE_XCCONFIG_FILE=/tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value /tmp/tmp.xcconfig'
        title: 'Workaround carthage lipo bug #3019'
    - carthage@3.2:
        inputs:
        - carthage_options: ' --platform ios'
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            rm /tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value '''''
        title: Remove carthage lipo workaround
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            # Import only the shipping locales (from shipping_locales.txt) on Release

            # builds. Import all locales on Beta and Fennec_Enterprise, except for
            pull

            # requests.

            git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git || exit
            1

            pip install --user virtualenv

            cd /usr/local/bin

            ln -s /Users/vagrant/Library/Python/3.9/bin/virtualenv .

            cd -

            ./ios-l10n-scripts/import-locales-firefox.sh --release'
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            cd Client.xcodeproj

            sed -i '''' ''s/"Fennec Development"/"Bitrise Firefox iOS Dev"/'' project.pbxproj

            sed -i '''' ''s/Fennec Today Development/Bitrise Firefox iOS Dev - Fennec
            Today/'' project.pbxproj

            sed -i '''' ''s/Fennec ShareTo Development/Bitrise Firefox iOS Dev - Share
            To/'' project.pbxproj

            sed -i '''' ''s/Fennec WidgetKit Development/Bitrise Firefox iOS Dev -
            WidgetKit/'' project.pbxproj

            sed -i '''' ''s/"XCUITests"/"Bitrise Firefox iOS Dev - XCUI Tests"/''
            project.pbxproj

            sed -i '''' ''s/Fennec NotificationService Development/Bitrise Firefox
            iOS Dev - Notification Service/'' project.pbxproj

            sed -i '''' ''s/CODE_SIGN_IDENTITY = "iPhone Developer"/CODE_SIGN_IDENTITY
            = "iPhone Distribution"/'' project.pbxproj

            # sed -i '''' ''s/DEVELOPMENT_TEAM = ""/DEVELOPMENT_TEAM = 43AQ936H96/''
            project.pbxproj

            cd -'
        title: Set provisioning to Bitrise in xcodeproj
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            set -x


            npm install

            npm run build

            '
        title: NPM install and build
    - git::https://github.com/bitrise-steplib/steps-xcode-build-for-test.git@export-fix:
        inputs:
        - configuration: Release
        - xcodebuild_options: CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
            -testPlan SmokeXCUITests
        - scheme: Fennec_Enterprise_XCUITests
        - xcodebuild_test_options: -testPlan SmokeXCUITests
    - deploy-to-bitrise-io@1.9: {}
    - cache-push@2.2: {}
    - slack@3.1:
        inputs:
        - webhook_url: $WEBHOOK_SLACK_TOKEN
  L10nBuild:
    description: This Workflow is to run tests (currently SmokeTest) when there is
      a merge in master
    envs:
    - BITRISE_SCHEME: L10nSnapshotTest
      opts:
        is_expand: false
    meta:
      bitrise.io:
        stack: osx-xcode-12.3.x
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4: {}
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo "PostClone step"

            carthage checkout


            cd content-blocker-lib-ios/ContentBlockerGen && swift run'
        title: Post clone step for TP updates
    - cache-pull@2.1: {}
    - certificate-and-profile-installer@1.10: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo ''EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64=arm64
            arm64e armv7 armv7s armv6 armv8'' > /tmp/tmp.xcconfig

            echo ''EXCLUDED_ARCHS=$(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT))''
            >> /tmp/tmp.xcconfig

            echo ''IPHONEOS_DEPLOYMENT_TARGET=11.4'' >> /tmp/tmp.xcconfig

            echo ''SWIFT_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            echo ''GCC_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            export XCODE_XCCONFIG_FILE=/tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value /tmp/tmp.xcconfig'
        title: Workaround carthage lipo
    - carthage@3.2:
        inputs:
        - carthage_options: --platform ios
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            rm /tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value '''''
        title: Remove carthage lip
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            # Import only the shipping locales (from shipping_locales.txt) on Release

            # builds. Import all locales on Beta and Fennec_Enterprise, except for
            pull

            # requests.

            git clone https://github.com/boek/ios-l10n-scripts.git -b new_tool ||
            exit 1

            git clone --depth 1 https://github.com/mozilla-l10n/firefoxios-l10n firefoxios-l10n
            || exit 1

            ./ios-l10n-scripts/ios-l10n-tools --project-path Client.xcodeproj --l10n-project-path
            ./firefoxios-l10n --import'
        title: Pull in L10n
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            npm install

            npm run build'
        title: NPM install and build
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            ./l10n-screenshots.sh en-US'
        title: Generate screenshots
    - deploy-to-bitrise-io@1.10:
        inputs:
        - deploy_path: l10n-screenshots-dd/
        - is_compress: 'true'
    - deploy-to-bitrise-io@1.10:
        inputs:
        - deploy_path: l10n-screenshots/en-US/en-US
        - is_compress: 'true'
    - cache-push@2.3: {}
  L10nScreenshotsTests:
    description: This Workflow is to run tests (currently SmokeTest) when there is
      a merge in master
    envs:
    - BITRISE_SCHEME: L10nSnapshotTest
      opts:
        is_expand: false
    meta:
      bitrise.io:
        stack: osx-xcode-12.3.x
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4: {}
    - certificate-and-profile-installer@1.10: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            # Import only the shipping locales (from shipping_locales.txt) on Release

            # builds. Import all locales on Beta and Fennec_Enterprise, except for
            pull

            # requests.

            git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git || exit
            1

            pip install --user virtualenv

            cd /usr/local/bin

            ln -s /Users/vagrant/Library/Python/3.9/bin/virtualenv .

            cd -

            ./ios-l10n-scripts/import-locales-firefox.sh --release'
        title: Pull in L10n
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            curl --location --retry 5 --output l10n-screenshots-dd.zip "$MOZ_DERIVED_DATA_PATH"

            mkdir l10n-screenshots-dd

            unzip l10n-screenshots-dd.zip -d l10n-screenshots-dd

            rm l10n-screenshots-dd.zip'
        title: Download derived data path
    - script@1.1:
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug\
            \ log\nset -x\n\n./l10n-screenshots.sh --test-without-building $MOZ_LOCALES\n\
            \nmkdir -p artifacts\n\nfor locale in $(echo $MOZ_LOCALES); do\n  zip\
            \ -9 -j \"$locale.zip\" \"l10n-screenshots/$locale/$locale/\"*\n  mv \"\
            $locale.zip\" artifacts/\ndone"
        title: Generate screenshots
    - deploy-to-bitrise-io@1.10:
        inputs:
        - deploy_path: artifacts/
  NewXcodeVersions:
    after_run:
    - RunSmokeXCUITests
    description: This Workflow is to run tests (currently SmokeTest) when there is
      a merge in master
    meta:
      bitrise.io:
        stack: 12.5.x
    steps:
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            YESTERDAY=`date -v -1d ''+%Y-%m-%d''`


            brew install jq


            curl -X GET -s -H ''Accept: application/vnd.github.v3+json'' -H "authorization:
            Bearer ${GITHUB_ACCESS_TOKEN}" https://api.github.com/repos/mozilla-mobile/firefox-ios/commits\?sha\=main\&since\=$YESTERDAY
            | jq -e -r ''.[].commit.author | select(.name | contains("BITRISE.YML-bot"))''
            > /dev/null/

            test $? -eq 0 || exit 1'
        title: Check main branch for recent activity before continuing
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0: {}
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo "PostClone step"

            carthage checkout


            cd content-blocker-lib-ios/ContentBlockerGen && swift run'
        title: Post clone step for TP updates
    - cache-pull@2.4: {}
    - certificate-and-profile-installer@1.10: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            echo ''EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64=arm64
            arm64e armv7 armv7s armv6 armv8'' > /tmp/tmp.xcconfig

            echo ''EXCLUDED_ARCHS=$(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT))''
            >> /tmp/tmp.xcconfig

            echo ''IPHONEOS_DEPLOYMENT_TARGET=11.4'' >> /tmp/tmp.xcconfig

            echo ''SWIFT_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            echo ''GCC_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            export XCODE_XCCONFIG_FILE=/tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value /tmp/tmp.xcconfig'
        title: Workaround carthage lipo bug
    - carthage@3.2:
        inputs:
        - carthage_options: --platform ios
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            rm /tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value '''''
        title: Remove carthage lipo workaround
    - script@1:
        inputs:
        - content: '

            #!/usr/bin/env bash

            set -e

            set -x


            # Import only the shipping locales (from shipping_locales.txt) on Release

            # builds. Import all locales on Beta and Fennec_Enterprise, except for
            pull

            # requests.

            git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git || exit
            1

            pip install --user virtualenv

            cd /usr/local/bin

            ln -s /Users/vagrant/Library/Python/3.9/bin/virtualenv .

            cd -

            ./ios-l10n-scripts/import-locales-firefox.sh --release'
        title: Pull in L10N
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            cd Client.xcodeproj

            sed -i '''' ''s/"Fennec Development"/"Bitrise Firefox iOS Dev"/'' project.pbxproj

            sed -i '''' ''s/Fennec Today Development/Bitrise Firefox iOS Dev - Fennec
            Today/'' project.pbxproj

            sed -i '''' ''s/Fennec ShareTo Development/Bitrise Firefox iOS Dev - Share
            To/'' project.pbxproj

            sed -i '''' ''s/Fennec WidgetKit Development/Bitrise Firefox iOS Dev -
            WidgetKit/'' project.pbxproj

            sed -i '''' ''s/"XCUITests"/"Bitrise Firefox iOS Dev - XCUI Tests"/''
            project.pbxproj

            sed -i '''' ''s/Fennec NotificationService Development/Bitrise Firefox
            iOS Dev - Notification Service/'' project.pbxproj

            sed -i '''' ''s/CODE_SIGN_IDENTITY = "iPhone Developer"/CODE_SIGN_IDENTITY
            = "iPhone Distribution"/'' project.pbxproj

            cd -'
        title: Set provisioning to Bitrise in xcodeproj
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            npm install

            npm run build'
        title: NPM install and build
    - git::https://github.com/bitrise-steplib/steps-xcode-build-for-test.git@export-fix:
        inputs:
        - xcodebuild_options: CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
        - scheme: Fennec
    - xcode-test@2:
        inputs:
        - scheme: Fennec
        - simulator_device: iPhone 8
    - deploy-to-bitrise-io@1.9: {}
    - cache-push@2.4: {}
    - slack@3.1:
        inputs:
        - webhook_url: $WEBHOOK_SLACK_TOKEN
  RunAllXCUITests:
    description: This Workflow is to run tests (currently SmokeTest) when there is
      a merge in master
    meta:
      bitrise.io:
        stack: osx-xcode-12.3.x
    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0: {}
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo "PostClone step"

            carthage checkout


            cd content-blocker-lib-ios/ContentBlockerGen && swift run'
        title: Post clone step for TP updates
    - cache-pull@2: {}
    - certificate-and-profile-installer@1.10: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo ''EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64=arm64
            arm64e armv7 armv7s armv6 armv8'' > /tmp/tmp.xcconfig

            echo ''EXCLUDED_ARCHS=$(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT))''
            >> /tmp/tmp.xcconfig

            echo ''IPHONEOS_DEPLOYMENT_TARGET=11.4'' >> /tmp/tmp.xcconfig

            echo ''SWIFT_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            echo ''GCC_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            export XCODE_XCCONFIG_FILE=/tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value /tmp/tmp.xcconfig'
        title: 'Workaround carthage lipo bug #3019'
    - carthage@3.2:
        inputs:
        - carthage_options: ' --platform ios'
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            rm /tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value '''''
        title: Remove carthage lipo workaround
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            # Import only the shipping locales (from shipping_locales.txt) on Release

            # builds. Import all locales on Beta and Fennec_Enterprise, except for
            pull

            # requests.

            git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git || exit
            1

            pip install --user virtualenv

            cd /usr/local/bin

            ln -s /Users/vagrant/Library/Python/3.9/bin/virtualenv .

            cd -

            ./ios-l10n-scripts/import-locales-firefox.sh --release'
        title: Pull in L10n
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            cd Client.xcodeproj

            sed -i '''' ''s/"Fennec Development"/"Bitrise Firefox iOS Dev"/'' project.pbxproj

            sed -i '''' ''s/Fennec Today Development/Bitrise Firefox iOS Dev - Fennec
            Today/'' project.pbxproj

            sed -i '''' ''s/Fennec ShareTo Development/Bitrise Firefox iOS Dev - Share
            To/'' project.pbxproj

            sed -i '''' ''s/Fennec WidgetKit Development/Bitrise Firefox iOS Dev -
            WidgetKit/'' project.pbxproj

            sed -i '''' ''s/"XCUITests"/"Bitrise Firefox iOS Dev - XCUI Tests"/''
            project.pbxproj

            sed -i '''' ''s/Fennec NotificationService Development/Bitrise Firefox
            iOS Dev - Notification Service/'' project.pbxproj

            sed -i '''' ''s/CODE_SIGN_IDENTITY = "iPhone Developer"/CODE_SIGN_IDENTITY
            = "iPhone Distribution"/'' project.pbxproj

            cd -'
        title: Set provisioning to Bitrise in xcodeproj
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            set -x


            npm install

            npm run build

            '
        title: NPM install and build
    - git::https://github.com/bitrise-steplib/steps-xcode-build-for-test.git@export-fix:
        inputs:
        - xcodebuild_options: CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
            -testPlan Fennec_Enterprise_XCUITests
        - scheme: Fennec_Enterprise_XCUITests
    - xcode-test@2.4:
        inputs:
        - export_uitest_artifacts: 'true'
        - scheme: Fennec_Enterprise_XCUITests
        - simulator_os_version: '14.0'
        - simulator_device: iPhone 11
    - deploy-to-bitrise-io@1.10: {}
    - cache-push@2.2: {}
    - slack@3.1:
        inputs:
        - webhook_url: $WEBHOOK_SLACK_TOKEN
  RunSmokeXCUITests:
    before_run: []
    description: This Workflow is to run tests UI TESTS
    meta:
      bitrise.io:
        stack: osx-xcode-12.3.x
    steps:
    - cache-pull@2.1:
        is_always_run: true
    - xcode-test@2:
        inputs:
        - scheme: Fennec_Enterprise_XCUITests
        - xcodebuild_test_options: -testPlan SmokeXCUITests
        - simulator_device: iPhone 11
        is_always_run: true
    - deploy-to-bitrise-io@1.9: {}
    - cache-push@2.2: {}
    - slack@3.1:
        inputs:
        - webhook_url: $WEBHOOK_SLACK_TOKEN
  RunUITests:
    description: This Workflow is to run tests UI TESTS
    meta:
      bitrise.io:
        stack: osx-xcode-12.3.x
    steps:
    - cache-pull@2.1: {}
    - xcode-test@2:
        inputs:
        - scheme: Fennec_Enterprise_UITests
        - simulator_device: iPhone 8
        is_always_run: true
    - deploy-to-bitrise-io@1.9: {}
    - cache-push@2.2:
        is_always_run: true
    - slack@3.1:
        inputs:
        - webhook_url: $WEBHOOK_SLACK_TOKEN
  RunUnitTests:
    after_run:
    - RunSmokeXCUITests
    description: This Workflow is to run tests (currently SmokeTest) when there is
      a merge in master
    meta:
      bitrise.io:
        stack: osx-xcode-12.3.x
    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0: {}
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo "PostClone step"

            carthage checkout


            cd content-blocker-lib-ios/ContentBlockerGen && swift run'
        title: Post clone step for TP updates
    - cache-pull@2.4: {}
    - certificate-and-profile-installer@1.10: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            echo ''EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64=arm64
            arm64e armv7 armv7s armv6 armv8'' > /tmp/tmp.xcconfig

            echo ''EXCLUDED_ARCHS=$(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT))''
            >> /tmp/tmp.xcconfig

            echo ''IPHONEOS_DEPLOYMENT_TARGET=11.4'' >> /tmp/tmp.xcconfig

            echo ''SWIFT_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            echo ''GCC_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            export XCODE_XCCONFIG_FILE=/tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value /tmp/tmp.xcconfig'
        title: Workaround carthage lipo bug
    - carthage@3.2:
        inputs:
        - carthage_options: --platform ios
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            rm /tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value '''''
        title: Remove carthage lipo workaround
    - script@1:
        inputs:
        - content: '

            #!/usr/bin/env bash

            set -e

            set -x

            # Import only the shipping locales (from shipping_locales.txt) on Release

            # builds. Import all locales on Beta and Fennec_Enterprise, except for
            pull

            # requests.

            git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git || exit
            1

            pip install --user virtualenv

            cd /usr/local/bin

            ln -s /Users/vagrant/Library/Python/3.9/bin/virtualenv .

            cd -

            ./ios-l10n-scripts/import-locales-firefox.sh --release'
        title: Pull in L10N
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            cd Client.xcodeproj

            sed -i '''' ''s/"Fennec Development"/"Bitrise Firefox iOS Dev"/'' project.pbxproj

            sed -i '''' ''s/Fennec Today Development/Bitrise Firefox iOS Dev - Fennec
            Today/'' project.pbxproj

            sed -i '''' ''s/Fennec ShareTo Development/Bitrise Firefox iOS Dev - Share
            To/'' project.pbxproj

            sed -i '''' ''s/Fennec WidgetKit Development/Bitrise Firefox iOS Dev -
            WidgetKit/'' project.pbxproj

            sed -i '''' ''s/"XCUITests"/"Bitrise Firefox iOS Dev - XCUI Tests"/''
            project.pbxproj

            sed -i '''' ''s/Fennec NotificationService Development/Bitrise Firefox
            iOS Dev - Notification Service/'' project.pbxproj

            sed -i '''' ''s/CODE_SIGN_IDENTITY = "iPhone Developer"/CODE_SIGN_IDENTITY
            = "iPhone Distribution"/'' project.pbxproj

            cd -'
        title: Set provisioning to Bitrise in xcodeproj
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            npm install

            npm run build'
        title: NPM install and build
    - git::https://github.com/bitrise-steplib/steps-xcode-build-for-test.git@export-fix:
        inputs:
        - xcodebuild_options: CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
        - scheme: Fennec
    - xcode-test@2:
        inputs:
        - scheme: Fennec
        - simulator_device: iPhone 8
    - deploy-to-bitrise-io@1.9: {}
    - cache-push@2.4: {}
    - slack@3.1:
        inputs:
        - webhook_url: $WEBHOOK_SLACK_TOKEN
  RunUnitTestsNewL10N:
    after_run:
    - RunSmokeXCUITests
    description: This Workflow is to run tests (currently SmokeTest) when there is
      a merge in master
    meta:
      bitrise.io:
        stack: osx-xcode-12.3.x
    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0: {}
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo "PostClone step"

            carthage checkout


            cd content-blocker-lib-ios/ContentBlockerGen && swift run'
        title: Post clone step for TP updates
    - cache-pull@2.4: {}
    - certificate-and-profile-installer@1.10: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            echo ''EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64=arm64
            arm64e armv7 armv7s armv6 armv8'' > /tmp/tmp.xcconfig

            echo ''EXCLUDED_ARCHS=$(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT))''
            >> /tmp/tmp.xcconfig

            echo ''IPHONEOS_DEPLOYMENT_TARGET=11.4'' >> /tmp/tmp.xcconfig

            echo ''SWIFT_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            echo ''GCC_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            export XCODE_XCCONFIG_FILE=/tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value /tmp/tmp.xcconfig'
        title: Workaround carthage lipo bug
    - carthage@3.2:
        inputs:
        - carthage_options: --platform ios
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            rm /tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value '''''
        title: Remove carthage lipo workaround
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            git clone https://github.com/boek/ios-l10n-scripts.git -b new_tool ||
            exit 1

            git clone --depth 1 https://github.com/mozilla-l10n/firefoxios-l10n firefoxios-l10n
            || exit 1

            ./ios-l10n-scripts/ios-l10n-tools --project-path Client.xcodeproj --l10n-project-path
            ./firefoxios-l10n --import'
        title: Pull in L10N
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            cd Client.xcodeproj

            sed -i '''' ''s/"Fennec Development"/"Bitrise Firefox iOS Dev"/'' project.pbxproj

            sed -i '''' ''s/Fennec Today Development/Bitrise Firefox iOS Dev - Fennec
            Today/'' project.pbxproj

            sed -i '''' ''s/Fennec ShareTo Development/Bitrise Firefox iOS Dev - Share
            To/'' project.pbxproj

            sed -i '''' ''s/Fennec WidgetKit Development/Bitrise Firefox iOS Dev -
            WidgetKit/'' project.pbxproj

            sed -i '''' ''s/"XCUITests"/"Bitrise Firefox iOS Dev - XCUI Tests"/''
            project.pbxproj

            sed -i '''' ''s/Fennec NotificationService Development/Bitrise Firefox
            iOS Dev - Notification Service/'' project.pbxproj

            sed -i '''' ''s/CODE_SIGN_IDENTITY = "iPhone Developer"/CODE_SIGN_IDENTITY
            = "iPhone Distribution"/'' project.pbxproj

            cd -'
        title: Set provisioning to Bitrise in xcodeproj
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            npm install

            npm run build'
        title: NPM install and build
    - git::https://github.com/bitrise-steplib/steps-xcode-build-for-test.git@export-fix:
        inputs:
        - xcodebuild_options: CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
        - scheme: Fennec
    - xcode-test@2:
        inputs:
        - scheme: Fennec
        - simulator_device: iPhone 8
    - deploy-to-bitrise-io@1.9: {}
    - cache-push@2.4: {}
    - slack@3.1:
        inputs:
        - webhook_url: $WEBHOOK_SLACK_TOKEN
  TEMP:
    description: ''
    envs:
    - BITRISE_SCHEME: Firefox
      opts:
        is_expand: false
    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0: {}
    - cache-pull@2.1: {}
    - certificate-and-profile-installer@1.10: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo ''EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64=arm64
            arm64e armv7 armv7s armv6 armv8'' > /tmp/tmp.xcconfig

            echo ''EXCLUDED_ARCHS=$(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT))''
            >> /tmp/tmp.xcconfig

            echo ''IPHONEOS_DEPLOYMENT_TARGET=11.4'' >> /tmp/tmp.xcconfig

            echo ''SWIFT_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            echo ''GCC_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            export XCODE_XCCONFIG_FILE=/tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value /tmp/tmp.xcconfig'
        title: Workaround carthage lipo bug
    - carthage@3.2:
        inputs:
        - carthage_options: ' --platform ios --cache-builds'
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x



            rm /tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value '''''
        title: remove carthage lipo workaround
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            # Import only the shipping locales (from shipping_locales.txt) on Release

            # builds. Import all locales on Beta and Fennec_Enterprise, except for
            pull

            # requests.

            git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git || exit
            1

            pip install --user virtualenv

            cd /usr/local/bin

            ln -s /Users/vagrant/Library/Python/3.9/bin/virtualenv .

            cd -

            ./ios-l10n-scripts/import-locales-firefox.sh --release'
        title: Pull in L10N
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            cd Client.xcodeproj

            sed -i '''' ''s/CODE_SIGN_IDENTITY = "iPhone Developer"/CODE_SIGN_IDENTITY
            = "iPhone Distribution"/'' project.pbxproj

            cd -'
        title: Set xcodeproj code_sign_identity
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            npm install

            npm run build


            cd content-blocker-lib-ios/ContentBlockerGen && swift run'
        title: NPM, ContentBlockerGen
    - cache-push@2: {}
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Client/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Extensions/NotificationService/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Extensions/ShareTo/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Extensions/Today/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: WidgetKit/Info.plist
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            # write your script here


            echo "Setting Leanplum environment to PRODUCTION for $BUDDYBUILD_SCHEME"

            /usr/libexec/PlistBuddy -c "Set LeanplumAppId $LEANPLUM_APP_ID" "Client/Info.plist"

            /usr/libexec/PlistBuddy -c "Set LeanplumProductionKey $LEANPLUM_KEY_PRODUCTION"
            "Client/Info.plist"

            /usr/libexec/PlistBuddy -c "Set LeanplumDevelopmentKey $LEANPLUM_KEY_DEVELOPMENT"
            "Client/Info.plist"'
        title: Leanplum Variable Setup
    - xcode-archive@2:
        inputs:
        - compile_bitcode: 'no'
        - upload_bitcode: 'no'
        - team_id: 43AQ936H96
        - export_method: app-store
        - output_tool: xcodebuild
        - configuration: $BITRISE_SCHEME
    - deploy-to-bitrise-io@1: {}
    - deploy-to-itunesconnect-application-loader@0:
        inputs:
        - app_password: $APPLE_ACCOUNT_PW
        - itunescon_user: $APPLE_ACCOUNT_ID
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x

            # sleep 9999'
        is_always_run: true
        title: debug-sleep
    - slack@3.1:
        inputs:
        - webhook_url: $WEBHOOK_SLACK_TOKEN
    - xcode-archive@2:
        inputs:
        - compile_bitcode: 'no'
        - upload_bitcode: 'no'
        - team_id: 43AQ936H96
        - export_method: app-store
        - output_tool: xcodebuild
        - scheme: FirefoxBeta
        - configuration: FirefoxBeta
        title: 'FirefoxBeta: Xcode Archive & Export for iOS'
    - deploy-to-itunesconnect-application-loader@0:
        inputs:
        - app_password: $APPLE_ACCOUNT_PW
        - itunescon_user: $APPLE_ACCOUNT_ID
        title: 'FirefoxBeta: Deploy to iTunes Connect'
  TestL10nScreenshots:
    description: This Workflow is to run tests (currently SmokeTest) when there is
      a merge in master
    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0: {}
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo "PostClone step"

            carthage checkout


            cd content-blocker-lib-ios/ContentBlockerGen && swift run'
        title: Post clone step for TP updates
    - cache-pull@2: {}
    - certificate-and-profile-installer@1.10: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo ''EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64=arm64
            arm64e armv7 armv7s armv6 armv8'' > /tmp/tmp.xcconfig

            echo ''EXCLUDED_ARCHS=$(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT))''
            >> /tmp/tmp.xcconfig

            echo ''IPHONEOS_DEPLOYMENT_TARGET=11.4'' >> /tmp/tmp.xcconfig

            echo ''SWIFT_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            echo ''GCC_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            export XCODE_XCCONFIG_FILE=/tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value /tmp/tmp.xcconfig'
        title: 'Workaround carthage lipo bug #3019'
    - carthage@3.2:
        inputs:
        - carthage_options: ' --platform ios'
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            rm /tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value '''''
        title: Remove carthage lipo workaround
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            # Import only the shipping locales (from shipping_locales.txt) on Release

            # builds. Import all locales on Beta and Fennec_Enterprise, except for
            pull

            # requests.

            git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git || exit
            1

            pip install --user virtualenv

            cd /usr/local/bin

            ln -s /Users/vagrant/Library/Python/3.9/bin/virtualenv .

            cd -

            ./ios-l10n-scripts/import-locales-firefox.sh --release'
        title: Pull in L10n
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            cd Client.xcodeproj

            sed -i '''' ''s/"Fennec Development"/"Bitrise Firefox iOS Dev"/'' project.pbxproj

            sed -i '''' ''s/Fennec Today Development/Bitrise Firefox iOS Dev - Fennec
            Today/'' project.pbxproj

            sed -i '''' ''s/Fennec ShareTo Development/Bitrise Firefox iOS Dev - Share
            To/'' project.pbxproj

            sed -i '''' ''s/Fennec WidgetKit Development/Bitrise Firefox iOS Dev -
            WidgetKit/'' project.pbxproj

            sed -i '''' ''s/"XCUITests"/"Bitrise Firefox iOS Dev - XCUI Tests"/''
            project.pbxproj

            sed -i '''' ''s/Fennec NotificationService Development/Bitrise Firefox
            iOS Dev - Notification Service/'' project.pbxproj

            sed -i '''' ''s/CODE_SIGN_IDENTITY = "iPhone Developer"/CODE_SIGN_IDENTITY
            = "iPhone Distribution"/'' project.pbxproj

            cd -'
        title: Set provisioning to Bitrise in xcodeproj
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            set -x


            npm install

            npm run build

            '
        title: NPM install and build
    - git::https://github.com/bitrise-steplib/steps-xcode-build-for-test.git@export-fix:
        inputs:
        - xcodebuild_options: CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
        - scheme: L10nSnapshotTests
    - xcode-test@2.4:
        inputs:
        - export_uitest_artifacts: 'true'
        - scheme: L10nSnapshotTests
        - simulator_os_version: '14.0'
        - simulator_device: iPhone 11
    - deploy-to-bitrise-io@1.10: {}
    - cache-push@2.2: {}
    - slack@3.1:
        inputs:
        - webhook_url: $WEBHOOK_SLACK_TOKEN
  TestPlanTesting:
    description: This Workflow is to run tests (currently SmokeTest) when there is
      a merge in master
    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0: {}
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo "PostClone step"

            carthage checkout


            cd content-blocker-lib-ios/ContentBlockerGen && swift run'
        title: Post clone step for TP updates
    - cache-pull@2: {}
    - certificate-and-profile-installer@1.10: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo ''EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64=arm64
            arm64e armv7 armv7s armv6 armv8'' > /tmp/tmp.xcconfig

            echo ''EXCLUDED_ARCHS=$(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT))''
            >> /tmp/tmp.xcconfig

            echo ''IPHONEOS_DEPLOYMENT_TARGET=11.4'' >> /tmp/tmp.xcconfig

            echo ''SWIFT_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            echo ''GCC_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            export XCODE_XCCONFIG_FILE=/tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value /tmp/tmp.xcconfig'
        title: 'Workaround carthage lipo bug #3019'
    - carthage@3.2:
        inputs:
        - carthage_options: ' --platform ios'
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            rm /tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value '''''
        title: Remove carthage lipo workaround
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            # Import only the shipping locales (from shipping_locales.txt) on Release

            # builds. Import all locales on Beta and Fennec_Enterprise, except for
            pull

            # requests.

            git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git || exit
            1

            pip install --user virtualenv

            cd /usr/local/bin

            ln -s /Users/vagrant/Library/Python/3.9/bin/virtualenv .

            cd -

            ./ios-l10n-scripts/import-locales-firefox.sh --release'
        title: Pull in L10n
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            cd Client.xcodeproj

            sed -i '''' ''s/"Fennec Development"/"Bitrise Firefox iOS Dev"/'' project.pbxproj

            sed -i '''' ''s/Fennec Today Development/Bitrise Firefox iOS Dev - Fennec
            Today/'' project.pbxproj

            sed -i '''' ''s/Fennec ShareTo Development/Bitrise Firefox iOS Dev - Share
            To/'' project.pbxproj

            sed -i '''' ''s/Fennec WidgetKit Development/Bitrise Firefox iOS Dev -
            WidgetKit/'' project.pbxproj

            sed -i '''' ''s/"XCUITests"/"Bitrise Firefox iOS Dev - XCUI Tests"/''
            project.pbxproj

            sed -i '''' ''s/Fennec NotificationService Development/Bitrise Firefox
            iOS Dev - Notification Service/'' project.pbxproj

            sed -i '''' ''s/CODE_SIGN_IDENTITY = "iPhone Developer"/CODE_SIGN_IDENTITY
            = "iPhone Distribution"/'' project.pbxproj

            cd -'
        title: Set provisioning to Bitrise in xcodeproj
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            set -x


            npm install

            npm run build

            '
        title: NPM install and build
    - git::https://github.com/bitrise-steplib/steps-xcode-build-for-test.git@export-fix:
        inputs:
        - xcodebuild_options: CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
            -testPlan PerformanceTestPlan
        - scheme: Fennec_Enterprise_XCUITests
    - xcode-test@2:
        inputs:
        - simulator_device: iPhone 8
        - scheme: Fennec_Enterprise_XCUITests
    - virtual-device-testing-for-ios@0:
        inputs:
        - download_test_results: 'true'
        - test_devices: iphone11,13.6,en,portrait
    - deploy-to-bitrise-io@1.10: {}
    - cache-push@2.2: {}
    - slack@3.1:
        inputs:
        - webhook_url: $WEBHOOK_SLACK_TOKEN
  TestingWorkflowAllTestsScenarios:
    description: 'This workflow have all the steps needed for the different tests
      scenarios:

      -Run tests on simulator

      -Run tests on real device (Bitrise)

      -Run tests on real device (Firebase)

      -Run tests on parallel (Flank and Firebase)


      With the necessary steps to generate the reports with the test results'
    steps:
    - activate-ssh-key@4.0.3:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0.14: {}
    - script@1.1.5:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            npm install

            npm run build'
        title: NPM install and build
    - certificate-and-profile-installer@1.10.1: {}
    - carthage@3.1.7:
        inputs:
        - carthage_options: --platform ios
    - git::https://github.com/bitrise-steplib/steps-xcode-build-for-test.git@export-fix:
        inputs:
        - configuration: Release
    - script@1.1.5:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x

            brew install https://raw.githubusercontent.com/TitouanVanBelle/XCTestHTMLReport/develop/xchtmlreport.rb'
        title: Install XCTestHTMLReport
    - xcode-test@2.0.0:
        inputs:
        - output_tool: xcodebuild
        - xcodebuild_test_options: -resultBundlePath ./ddata/Test.xcresult
        - simulator_device: iPad Air 2
        run_if: '{{enveq "BITRISE_SCHEME" "Fennec_Enterprise_XCUITests"}}'
    - script@1.1.5:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x

            xchtmlreport -r ./ddata/Test.xcresult

            cp ./ddata/Test.xcresult/index.html $BITRISE_DEPLOY_DIR/'
        is_always_run: true
        opts:
          is_expand: true
        run_if: '{{enveq "BITRISE_SCHEME" "Fennec_Enterprise_XCUITests"}}'
        title: Generate HTML report and export it
    - virtual-device-testing-for-ios@0.9.5:
        inputs:
        - test_devices: iphone6s,12.0,en,portrait
        run_if: '{{enveq "BITRISE_SCHEME" "Fennec_Enterprise_Smoke"}}'
    - script@1.1.5:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x

            mkdir /Users/vagrant/.config

            mkdir /Users/vagrant/.config/gcloud

            echo "$SERVICE_ACCOUNT_KEY_JSON" > $HOME/.config/gcloud/application_default_credentials.json'
        is_always_run: true
        run_if: '{{enveq "BITRISE_SCHEME" "Fennec_Enterprise_SMXCUITests"}}'
        title: Save Google Service Account JSON
    - script@1.1.5:
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug\
            \ log\nset -x\ncat << FLANKEOF > ./flank.ios.yml\n# gcloud args match\
            \ the official gcloud cli\n# https://cloud.google.com/sdk/gcloud/reference/alpha/firebase/test/ios/run\n\
            gcloud:\n  # results-bucket: tmp_flank\n  record-video: true\n  timeout:\
            \ 30m\n  async: false\n  # project: firefox-iOS\n  # results-history-name:\
            \ firefox-iOS-history\n  # test and xctestrun-file are the only required\
            \ args\n  # zipped test bundle is available in BITRISE_TEST_BUNDLE_ZIP_PATH\n\
            \  # test: /Users/vagrant/deploy/testbundle.zip\n  test: $BITRISE_TEST_BUNDLE_ZIP_PATH\n\
            \  # built xctestrun file is available in BITRISE_XCTESTRUN_FILE_PATH\n\
            \  #xctestrun-file: /Users/vagrant/deploy/Fennec_Enterprise_XCUITests_iphoneos12.1-arm64e.xctestrun\n\
            \  xctestrun-file: $BITRISE_XCTESTRUN_FILE_PATH\n  xcode-version: 10.2\n\
            \  device:\n    - model: iphone6s\n      version: 12.0\n      locale:\
            \ en\n      orientation: portrait\nflank:\n  # test shards - the amount\
            \ of groups to split the test suite into\n  # set to -1 to use one shard\
            \ per test.\n  testShards: 3\n  # repeat tests - the amount of times to\
            \ run the tests.\n  # 1 runs the tests once. 10 runs all the tests 10x\n\
            \  repeatTests: 1\n  # always run - these tests are inserted at the beginning\
            \ of every shard\n  # useful if you need to grant permissions or login\
            \ before other tests run\n  #test-targets:\n    # - HistoryTests/testClearHistoryFromSettings\n\
            \    # - ActivityStreamTest/testDefaultSites"
        is_always_run: true
        run_if: '{{enveq "BITRISE_SCHEME" "Fennec_Enterprise_SMXCUITests"}}'
        title: Generate Flank config
    - script@1.1.5:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            mkdir /Users/vagrant/deploy/Fennec-iphoneos

            mkdir /Users/vagrant/deploy/Fennec-iphoneos/XCUITests-Runner.app

            mkdir /Users/vagrant/deploy/Fennec-iphoneos/XCUITests-Runner.app/PlugIns

            mkdir /Users/vagrant/deploy/Fennec-iphoneos/XCUITests-Runner.app/PlugIns/XCUITests.xctest/

            cp /Users/vagrant/deploy/Products/Fennec-iphoneos/XCUITests-Runner.app/PlugIns/XCUITests.xctest/XCUITests
            /Users/vagrant/deploy/Fennec-iphoneos/XCUITests-Runner.app/PlugIns/XCUITests.xctest/

            # The iphoneos folder name changes and so it has to be updated depending
            on the scheme run

            cp /Users/vagrant/deploy/Fennec_Enterprise_XCUITests_iphoneos12.1-arm64e.xctestrun
            /Users/vagrant/deploy/Fennec-iphoneos/XCUITests-Runner.app/PlugIns/XCUITests.xctest/

            set -x

            wget --quiet https://github.com/TestArmada/flank/releases/download/flank_snapshot/flank.jar
            -O /usr/local/bin/flank.jar

            java -jar /usr/local/bin/flank.jar firebase test ios run'
        is_always_run: true
        run_if: '{{enveq "BITRISE_SCHEME" "Fennec_Enterprise_SMXCUITests"}}'
        title: Run Flank
    - script@1.1.5:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            echo "Copying flank results to deploy dir"

            cp -r /Users/vagrant/*/results/*/* $BITRISE_DEPLOY_DIR'
        is_always_run: true
        run_if: '{{enveq "BITRISE_SCHEME" "Fennec_Enterprise_SMXCUITests"}}'
        title: Copy Results
    - deploy-to-bitrise-io@1.3.19: {}
  beta:
    description: ''
    envs:
    - BITRISE_SCHEME: Firefox
      opts:
        is_expand: false
    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0: {}
    - certificate-and-profile-installer@1.10: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo ''EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64=arm64
            arm64e armv7 armv7s armv6 armv8'' > /tmp/tmp.xcconfig

            echo ''EXCLUDED_ARCHS=$(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT))''
            >> /tmp/tmp.xcconfig

            echo ''IPHONEOS_DEPLOYMENT_TARGET=11.4'' >> /tmp/tmp.xcconfig

            echo ''SWIFT_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            echo ''GCC_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            export XCODE_XCCONFIG_FILE=/tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value /tmp/tmp.xcconfig'
        title: Workaround carthage lipo bug
    - carthage@3.2:
        inputs:
        - carthage_options: ' --platform ios --cache-builds'
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x



            rm /tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value '''''
        title: remove carthage lipo workaround
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            # Import only the shipping locales (from shipping_locales.txt) on Release

            # builds. Import all locales on Beta and Fennec_Enterprise, except for
            pull

            # requests.

            git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git || exit
            1

            pip install --user virtualenv

            cd /usr/local/bin

            ln -s /Users/vagrant/Library/Python/3.9/bin/virtualenv .

            cd -

            ./ios-l10n-scripts/import-locales-firefox.sh --release'
        title: Pull in L10N
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            cd Client.xcodeproj

            sed -i '''' ''s/CODE_SIGN_IDENTITY = "iPhone Developer"/CODE_SIGN_IDENTITY
            = "iPhone Distribution"/'' project.pbxproj

            cd -'
        title: Set xcodeproj code_sign_identity
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            npm install

            npm run build


            cd content-blocker-lib-ios/ContentBlockerGen && swift run'
        title: NPM, ContentBlockerGen
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Client/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Extensions/NotificationService/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Extensions/ShareTo/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Extensions/Today/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: WidgetKit/Info.plist
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            # write your script here


            echo "Setting Leanplum environment to PRODUCTION for $BUDDYBUILD_SCHEME"

            /usr/libexec/PlistBuddy -c "Set LeanplumAppId $LEANPLUM_APP_ID" "Client/Info.plist"

            /usr/libexec/PlistBuddy -c "Set LeanplumProductionKey $LEANPLUM_KEY_PRODUCTION"
            "Client/Info.plist"

            /usr/libexec/PlistBuddy -c "Set LeanplumDevelopmentKey $LEANPLUM_KEY_DEVELOPMENT"
            "Client/Info.plist"'
        title: Leanplum Variable Setup
    - deploy-to-bitrise-io@1: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x

            # sleep 9999'
        is_always_run: true
        title: debug-sleep
    - slack@3.1:
        inputs:
        - webhook_url: $WEBHOOK_SLACK_TOKEN
    - xcode-archive@2:
        inputs:
        - compile_bitcode: 'no'
        - upload_bitcode: 'no'
        - team_id: 43AQ936H96
        - export_method: app-store
        - output_tool: xcodebuild
        - scheme: FirefoxBeta
        - configuration: FirefoxBeta
        title: 'FirefoxBeta: Xcode Archive & Export for iOS'
    - deploy-to-itunesconnect-application-loader@0:
        inputs:
        - app_password: $APPLE_ACCOUNT_PW
        - itunescon_user: $APPLE_ACCOUNT_ID
        title: 'FirefoxBeta: Deploy to iTunes Connect'
  ios13-xcode11.7-28.x-release:
    description: ''
    envs:
    - BITRISE_SCHEME: Firefox
      opts:
        is_expand: false
    meta:
      bitrise.io:
        stack: osx-xcode-11.7.x
    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0: {}
    - cache-pull@2.1: {}
    - certificate-and-profile-installer@1.10: {}
    - carthage@3.2:
        inputs:
        - carthage_options: ' --platform ios --cache-builds'
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x



            # Import only the shipping locales (from shipping_locales.txt) on Release

            # builds. Import all locales on Beta and Fennec_Enterprise, except for
            pull

            # requests.

            #


            git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git || exit
            1


            easy_install --user pip

            cd /usr/local/bin && ln -s ~/Library/Python/2.7/bin/pip . && cd -

            pip install virtualenv

            cd /usr/local/bin && ln -s ~/Library/Python/2.7/bin/virtualenv . && cd
            -

            ./ios-l10n-scripts/import-locales-firefox.sh --release


            '
        title: Pull in L10N
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            cd Client.xcodeproj

            sed -i '''' ''s/"Firefox Development"/"BR Firefox App Store"/'' project.pbxproj

            sed -i '''' ''s/Firefox Today Development/BR Firefox Today App Store/''
            project.pbxproj

            sed -i '''' ''s/Firefox ShareTo Development/BR Firefox ShareTo App Store/''
            project.pbxproj

            sed -i '''' ''s/PROVISIONING_PROFILE_SPECIFIER = ""/PROVISIONING_PROFILE_SPECIFIER
            = "BR Firefox NotificationService App Store"/'' project.pbxproj

            sed -i '''' ''s/CODE_SIGN_IDENTITY = "iPhone Developer"/CODE_SIGN_IDENTITY
            = "iPhone Distribution"/'' project.pbxproj

            # sed -i '''' ''s/DEVELOPMENT_TEAM = ""/DEVELOPMENT_TEAM = 43AQ936H96/''
            project.pbxproj

            cd -'
        title: Set provisioning to Bitrise in xcodeproj
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            npm install

            npm run build


            cd content-blocker-lib-ios/ContentBlockerGen && swift run'
        title: NPM, ContentBlockerGen
    - cache-push@2: {}
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Client/Info.plist
    - xcode-archive@2:
        inputs:
        - compile_bitcode: 'no'
        - upload_bitcode: 'no'
        - team_id: 43AQ936H96
        - export_method: app-store
        - output_tool: xcodebuild
        - configuration: $BITRISE_SCHEME
    - deploy-to-bitrise-io@1: {}
    - deploy-to-itunesconnect-application-loader@0:
        inputs:
        - app_password: $APPLE_ACCOUNT_PW
        - itunescon_user: $APPLE_ACCOUNT_ID
    - slack@3.1:
        inputs:
        - webhook_url: $WEBHOOK_SLACK_TOKEN
  jlorenzo_L10nBuild:
    description: This Workflow is to run tests (currently SmokeTest) when there is
      a merge in master
    envs:
    - BITRISE_SCHEME: L10nSnapshotTest
      opts:
        is_expand: false
    meta:
      bitrise.io:
        stack: osx-xcode-11.5.x
    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0: {}
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo "PostClone step"

            carthage checkout


            cd content-blocker-lib-ios/ContentBlockerGen && swift run'
        title: Post clone step for TP updates
    - cache-pull@2.1: {}
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            npm install

            npm run build'
        title: NPM install and build
    - certificate-and-profile-installer@1.10: {}
    - carthage@3.2:
        inputs:
        - carthage_options: --platform ios
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            pip3 install virtualenv

            virtualenv .

            source ./bin/activate


            # write your script here

            ls

            cd /Users/vagrant/git/

            ls

            git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git


            # Import locales

            ./ios-l10n-scripts/import-locales-firefox.sh'
        title: Import locales
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            ./l10n-screenshots.sh $MOZ_LOCALES'
        title: Generate screenshots
    - deploy-to-bitrise-io@1.9:
        inputs:
        - deploy_path: l10n-screenshots-dd/
        - is_compress: 'true'
    - deploy-to-bitrise-io@1.9:
        inputs:
        - deploy_path: l10n-screenshots/en-US/en-US
        - is_compress: 'true'
    - cache-push@2.2: {}
  jlorenzo_L10nScreenshotsTests:
    description: This Workflow is to run tests (currently SmokeTest) when there is
      a merge in master
    envs:
    - BITRISE_SCHEME: L10nSnapshotTest
      opts:
        is_expand: false
    meta:
      bitrise.io:
        stack: osx-xcode-11.5.x
    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0: {}
    - certificate-and-profile-installer@1.10: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            pip3 install virtualenv

            virtualenv .

            source ./bin/activate


            # write your script here

            ls

            cd /Users/vagrant/git/

            ls

            git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git


            # Import locales

            ./ios-l10n-scripts/import-locales-firefox.sh'
        title: Import locales
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            curl --location --retry 5 --output l10n-screenshots-dd.zip "$MOZ_DERIVED_DATA_PATH"

            mkdir l10n-screenshots-dd

            unzip l10n-screenshots-dd.zip -d l10n-screenshots-dd

            rm l10n-screenshots-dd.zip'
        title: Download derived data path
    - script@1.1:
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug\
            \ log\nset -x\n\n./l10n-screenshots.sh --test-without-building $MOZ_LOCALES\n\
            \nmkdir -p artifacts\n\nfor locale in $(echo $MOZ_LOCALES); do\n  zip\
            \ -9 -j \"$locale.zip\" \"l10n-screenshots/$locale/$locale/\"*\n  mv \"\
            $locale.zip\" artifacts/\ndone"
        title: Generate screenshots
    - deploy-to-bitrise-io@1.9:
        inputs:
        - deploy_path: artifacts/
  xcode12-3-build-only:
    description: This Workflow is to build app on XCode 12.3
    envs:
    - BITRISE_SCHEME: Firefox
      opts:
        is_expand: false
    meta:
      bitrise.io:
        stack: osx-xcode-12.3.x
    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0: {}
    - certificate-and-profile-installer@1.10: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo ''EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64=arm64
            arm64e armv7 armv7s armv6 armv8'' > /tmp/tmp.xcconfig

            echo ''EXCLUDED_ARCHS=$(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT))''
            >> /tmp/tmp.xcconfig

            echo ''IPHONEOS_DEPLOYMENT_TARGET=11.4'' >> /tmp/tmp.xcconfig

            echo ''SWIFT_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            echo ''GCC_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            export XCODE_XCCONFIG_FILE=/tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value /tmp/tmp.xcconfig'
        title: Workaround carthage lipo bug
    - carthage@3.2:
        inputs:
        - carthage_options: ' --platform ios --cache-builds'
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x



            rm /tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value '''''
        title: remove carthage lipo workaround
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            # Import only the shipping locales (from shipping_locales.txt) on Release

            # builds. Import all locales on Beta and Fennec_Enterprise, except for
            pull

            # requests.

            git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git || exit
            1

            pip install --user virtualenv

            cd /usr/local/bin

            ln -s /Users/vagrant/Library/Python/3.9/bin/virtualenv .

            cd -

            ./ios-l10n-scripts/import-locales-firefox.sh --release'
        title: Pull in L10N
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            cd Client.xcodeproj

            sed -i '''' ''s/CODE_SIGN_IDENTITY = "iPhone Developer"/CODE_SIGN_IDENTITY
            = "iPhone Distribution"/'' project.pbxproj

            cd -'
        title: Set xcodeproj code_sign_identity
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            npm install

            npm run build


            cd content-blocker-lib-ios/ContentBlockerGen && swift run'
        title: NPM, ContentBlockerGen
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Client/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Extensions/NotificationService/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Extensions/ShareTo/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Extensions/Today/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: WidgetKit/Info.plist
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            # write your script here


            echo "Setting Leanplum environment to PRODUCTION for $BUDDYBUILD_SCHEME"

            /usr/libexec/PlistBuddy -c "Set LeanplumAppId $LEANPLUM_APP_ID" "Client/Info.plist"

            /usr/libexec/PlistBuddy -c "Set LeanplumProductionKey $LEANPLUM_KEY_PRODUCTION"
            "Client/Info.plist"

            /usr/libexec/PlistBuddy -c "Set LeanplumDevelopmentKey $LEANPLUM_KEY_DEVELOPMENT"
            "Client/Info.plist"'
        title: Leanplum Variable Setup
  xcode12-release-and-beta:
    description: ''
    envs:
    - BITRISE_SCHEME: Firefox
      opts:
        is_expand: false
    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0: {}
    - cache-pull@2.1: {}
    - certificate-and-profile-installer@1.10: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo ''EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64=arm64
            arm64e armv7 armv7s armv6 armv8'' > /tmp/tmp.xcconfig

            echo ''EXCLUDED_ARCHS=$(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT))''
            >> /tmp/tmp.xcconfig

            echo ''IPHONEOS_DEPLOYMENT_TARGET=11.4'' >> /tmp/tmp.xcconfig

            echo ''SWIFT_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            echo ''GCC_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            export XCODE_XCCONFIG_FILE=/tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value /tmp/tmp.xcconfig'
        title: Workaround carthage lipo bug
    - carthage@3.2:
        inputs:
        - carthage_options: ' --platform ios --cache-builds'
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x



            rm /tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value '''''
        title: remove carthage lipo workaround
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            # Import only the shipping locales (from shipping_locales.txt) on Release

            # builds. Import all locales on Beta and Fennec_Enterprise, except for
            pull

            # requests.

            git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git || exit
            1

            pip install --user virtualenv

            cd /usr/local/bin

            ln -s /Users/vagrant/Library/Python/3.9/bin/virtualenv .

            cd -

            ./ios-l10n-scripts/import-locales-firefox.sh --release'
        title: Pull in L10N
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            cd Client.xcodeproj

            sed -i '''' ''s/CODE_SIGN_IDENTITY = "iPhone Developer"/CODE_SIGN_IDENTITY
            = "iPhone Distribution"/'' project.pbxproj

            cd -'
        title: Set xcodeproj code_sign_identity
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            npm install

            npm run build


            cd content-blocker-lib-ios/ContentBlockerGen && swift run'
        title: NPM, ContentBlockerGen
    - cache-push@2: {}
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Client/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Extensions/NotificationService/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Extensions/ShareTo/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Extensions/Today/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: WidgetKit/Info.plist
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            # write your script here


            echo "Setting Leanplum environment to PRODUCTION for $BUDDYBUILD_SCHEME"

            /usr/libexec/PlistBuddy -c "Set LeanplumAppId $LEANPLUM_APP_ID" "Client/Info.plist"

            /usr/libexec/PlistBuddy -c "Set LeanplumProductionKey $LEANPLUM_KEY_PRODUCTION"
            "Client/Info.plist"

            /usr/libexec/PlistBuddy -c "Set LeanplumDevelopmentKey $LEANPLUM_KEY_DEVELOPMENT"
            "Client/Info.plist"'
        title: Leanplum Variable Setup
    - xcode-archive@2:
        inputs:
        - compile_bitcode: 'no'
        - upload_bitcode: 'no'
        - team_id: 43AQ936H96
        - export_method: app-store
        - output_tool: xcodebuild
        - configuration: $BITRISE_SCHEME
    - deploy-to-bitrise-io@1: {}
    - deploy-to-itunesconnect-application-loader@0:
        inputs:
        - app_password: $APPLE_ACCOUNT_PW
        - itunescon_user: $APPLE_ACCOUNT_ID
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x

            # sleep 9999'
        is_always_run: true
        title: debug-sleep
    - slack@3.1:
        inputs:
        - webhook_url: $WEBHOOK_SLACK_TOKEN
    - xcode-archive@2:
        inputs:
        - compile_bitcode: 'no'
        - upload_bitcode: 'no'
        - team_id: 43AQ936H96
        - export_method: app-store
        - output_tool: xcodebuild
        - scheme: FirefoxBeta
        - configuration: FirefoxBeta
        title: 'FirefoxBeta: Xcode Archive & Export for iOS'
    - deploy-to-itunesconnect-application-loader@0:
        inputs:
        - app_password: $APPLE_ACCOUNT_PW
        - itunescon_user: $APPLE_ACCOUNT_ID
        title: 'FirefoxBeta: Deploy to iTunes Connect'
  xcode12-release-and-beta-nocache:
    description: ''
    envs:
    - BITRISE_SCHEME: Firefox
      opts:
        is_expand: false
    steps:
    - activate-ssh-key@4.0:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@4.0: {}
    - certificate-and-profile-installer@1.10: {}
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            echo ''EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64=arm64
            arm64e armv7 armv7s armv6 armv8'' > /tmp/tmp.xcconfig

            echo ''EXCLUDED_ARCHS=$(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT))''
            >> /tmp/tmp.xcconfig

            echo ''IPHONEOS_DEPLOYMENT_TARGET=11.4'' >> /tmp/tmp.xcconfig

            echo ''SWIFT_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            echo ''GCC_TREAT_WARNINGS_AS_ERRORS=NO'' >> /tmp/tmp.xcconfig

            export XCODE_XCCONFIG_FILE=/tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value /tmp/tmp.xcconfig'
        title: Workaround carthage lipo bug
    - carthage@3.2:
        inputs:
        - carthage_options: ' --platform ios --cache-builds'
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x



            rm /tmp/tmp.xcconfig

            envman add --key XCODE_XCCONFIG_FILE --value '''''
        title: remove carthage lipo workaround
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            # Import only the shipping locales (from shipping_locales.txt) on Release

            # builds. Import all locales on Beta and Fennec_Enterprise, except for
            pull

            # requests.

            git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git || exit
            1

            pip install --user virtualenv

            cd /usr/local/bin

            ln -s /Users/vagrant/Library/Python/3.9/bin/virtualenv .

            cd -

            ./ios-l10n-scripts/import-locales-firefox.sh --release'
        title: Pull in L10N
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x


            cd Client.xcodeproj

            sed -i '''' ''s/CODE_SIGN_IDENTITY = "iPhone Developer"/CODE_SIGN_IDENTITY
            = "iPhone Distribution"/'' project.pbxproj

            cd -'
        title: Set xcodeproj code_sign_identity
    - script@1.1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            npm install

            npm run build


            cd content-blocker-lib-ios/ContentBlockerGen && swift run'
        title: NPM, ContentBlockerGen
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Client/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Extensions/NotificationService/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Extensions/ShareTo/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: Extensions/Today/Info.plist
    - set-xcode-build-number@1:
        inputs:
        - plist_path: WidgetKit/Info.plist
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            # write your script here


            echo "Setting Leanplum environment to PRODUCTION for $BUDDYBUILD_SCHEME"

            /usr/libexec/PlistBuddy -c "Set LeanplumAppId $LEANPLUM_APP_ID" "Client/Info.plist"

            /usr/libexec/PlistBuddy -c "Set LeanplumProductionKey $LEANPLUM_KEY_PRODUCTION"
            "Client/Info.plist"

            /usr/libexec/PlistBuddy -c "Set LeanplumDevelopmentKey $LEANPLUM_KEY_DEVELOPMENT"
            "Client/Info.plist"'
        title: Leanplum Variable Setup
    - xcode-archive@2:
        inputs:
        - compile_bitcode: 'no'
        - upload_bitcode: 'no'
        - team_id: 43AQ936H96
        - export_method: app-store
        - output_tool: xcodebuild
        - configuration: $BITRISE_SCHEME
    - deploy-to-bitrise-io@1: {}
    - deploy-to-itunesconnect-application-loader@0:
        inputs:
        - app_password: $APPLE_ACCOUNT_PW
        - itunescon_user: $APPLE_ACCOUNT_ID
    - script@1:
        inputs:
        - content: '#!/usr/bin/env bash

            set -e

            set -x

            # sleep 9999'
        is_always_run: true
        title: debug-sleep
    - slack@3.1:
        inputs:
        - webhook_url: $WEBHOOK_SLACK_TOKEN
    - xcode-archive@2:
        inputs:
        - compile_bitcode: 'no'
        - upload_bitcode: 'no'
        - team_id: 43AQ936H96
        - export_method: app-store
        - output_tool: xcodebuild
        - scheme: FirefoxBeta
        - configuration: FirefoxBeta
        title: 'FirefoxBeta: Xcode Archive & Export for iOS'
    - deploy-to-itunesconnect-application-loader@0:
        inputs:
        - app_password: $APPLE_ACCOUNT_PW
        - itunescon_user: $APPLE_ACCOUNT_ID
        title: 'FirefoxBeta: Deploy to iTunes Connect'
